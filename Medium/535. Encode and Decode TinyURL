class Solution {
public:    
    Solution() {
        int i;
        for (i = 0; i < chars.size(); ++i)
            charToValueMap[chars[i]] = i;
    }
    // Encodes a URL to a shortened URL.
    string encode(string longUrl) {
        int id = urls.size() + 1;
        urls[id] = longUrl;
        vector<char> digits;
        while (id != 0)
        {
            digits.emplace_back(chars[id % base]);
            id /= base;
        }
        return baseUrl + string(digits.begin(), digits.end());
    }
    // Decodes a shortened URL to its original URL.
    string decode(string shortUrl) {
        int i, id = 0, idStringSize;
        string idString;
        idString = shortUrl.substr(baseUrlSize, shortUrl.size() - baseUrlSize);
        idStringSize = idString.size();
        for (i = 0; i < idStringSize; ++i)
            id += charToValueMap[idString[i]] * pow(base, idStringSize - i - 1);
        return urls[id];
    }
private:
    const string chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    const int base = chars.size();
    const string baseUrl = "http://tinyurl.com/";
    const int baseUrlSize = baseUrl.size();
    unordered_map<char, int> charToValueMap;
    unordered_map<int, string> urls;
};
// Your Solution object will be instantiated and called as such:
// Solution solution;
// solution.decode(solution.encode(url));