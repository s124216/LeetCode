class Solution {
public:
    vector<vector<char>> updateBoard(vector<vector<char>>& board, vector<int>& click) {
        int i, j, y_size = board.size(), x_size = board[0].size(), E = 0;
        if (board[click[0]][click[1]] == 'M')
            board[click[0]][click[1]] = 'X';
        update(board, click[1], click[0], y_size, x_size);
        for (i = 0; i < y_size; ++i)
        {
            for (j = 0; j < x_size; ++j)
            {
                if (board[i][j] == 'E')
                {
                    ++E;
                    break;
                }
            }
            if (E > 0)
                break;
        }
        if (E == 0)
        {
            for (i = 0; i < y_size; ++i)
            {
                for (j = 0; j < x_size; ++j)
                {
                    if (board[i][j] == 'M')
                        board[i][j] == 'X';
                }
                if (E > 0)
                    break;
            }
        }
        return board;
    }
    
    void update(vector<vector<char>>& board, int x, int y, int y_size, int x_size)
    {
        int mines = 0;
        if (x >= 0 && x < x_size && y >= 0 && y < y_size)
        if (board[y][x] == 'M');
        else if (board[y][x] == 'E')
        {
            mines = searchMines(board, x, y, y_size, x_size);
            if (mines == 0)
            {
                board[y][x] = 'B';
                update(board, x - 1, y + 1, y_size, x_size);
                update(board, x - 1, y, y_size, x_size);
                update(board, x - 1, y - 1, y_size, x_size);
                update(board, x, y - 1, y_size, x_size);
                update(board, x, y + 1, y_size, x_size);
                update(board, x + 1, y + 1, y_size, x_size);
                update(board, x + 1, y, y_size, x_size);
                update(board, x + 1, y - 1, y_size, x_size);
            }
            else
                board[y][x] = mines + '0';
        }
    }
    
    int searchMines(vector<vector<char>>& board, int x, int y, int y_size, int x_size)
    {
        int mines = 0;
        if (x - 1 >= 0 && board[y][x - 1] == 'M')
            ++mines;
        if (x - 1 >= 0 && y - 1 >= 0 && board[y - 1][x - 1] == 'M')
            ++mines;
        if (x - 1 >= 0 && y + 1 < y_size && board[y + 1][x - 1] == 'M')
            ++mines;
        if (y - 1 >= 0 && board[y - 1][x] == 'M')
            ++mines;
        if (y + 1 < y_size && board[y + 1][x] == 'M')
            ++mines;
        if (x + 1 < x_size && y - 1 >= 0 && board[y - 1][x + 1] == 'M')
            ++mines;
        if (x + 1 < x_size && board[y][x + 1] == 'M')
            ++mines;
        if (x + 1 < x_size && y + 1 < y_size && board[y + 1][x + 1] == 'M')
            ++mines;
        return mines;
    }
};