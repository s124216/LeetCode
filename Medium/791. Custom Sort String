class Solution {
public:
    string customSortString(string S, string T) {
        vector<int> Group;
        CollectGroup(Group, S, T);
        SortGroup(Group, S, T);
        return T;
    }
    
    void CollectGroup(vector<int>& Group, string& S, string& T)
    {
        int i, j;
        for (i = T.size() - 1; i >= 0; i--)
        {
            for (j = 0; j < S.size(); ++j)
            {
                if (S[j] == T[i])
                {
                    Group.push_back(i); // Group {n, n-1, n-2, ... 1, 0}
                    break;
                }
            }
        }
    }
    
    void SortGroup(vector<int>& Group, string& S, string& T)
    {
        int i, j, Count = 0, length = Group.size() - 1;
        for (i = S.size() - 1; i >= 0; i--)
        {
            if (Count == length)
                break;
            else
            {
                for (j = Group.size() - 1; j >= Count; j--)
                {
                    if (T[Group[j]] == S[i])
                    {
                        while (S[i] == T[Group[Count]] && j > Count)
                            Count++;
                        T[Group[j]] = T[Group[Count]];
                        T[Group[Count]] = S[i];
                        Count++;
                    }
                }
            }
        }
    }
};