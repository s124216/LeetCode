/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int number, Size, length1, length2, plus;
        ListNode *current = l1, *root;
        stack<int> s1, s2, result;
        while (current)
        {
            s1.push(current->val);
            current = current->next;
        }
        
        current = l2;
        while (current)
        {
            s2.push(current->val);
            current = current->next;
        }
        
        length1 = s1.size();
        length2 = s2.size();
        plus = 0;
        
        while (!s1.empty() && !s2.empty())
        {
            number = s1.top() + s2.top() + plus;
            s1.pop();
            s2.pop();
            if (number > 9)
            {
                result.push(number - 10);
                plus = 1;
            }
            else
            {
                result.push(number);
                plus = 0;
            }
        }
        
        if (!s1.empty())
        {
            while (!s1.empty())
            {
                number = s1.top() + plus;
                s1.pop();
                if (number > 9)
                {
                    result.push(number - 10);
                    plus = 1;
                }
                else
                {
                    result.push(number);
                    plus = 0;
                }
            }
        }
        if (!s2.empty())
        {
            while (!s2.empty())
            {
                number = s2.top() + plus;
                s2.pop();
                if (number > 9)
                {
                    result.push(number - 10);
                    plus = 1;
                }
                else
                {
                    result.push(number);
                    plus = 0;
                }
            }
        }
        if (plus)
            result.push(1);
        
        root = NULL;
        current = root = new ListNode(result.top());
        result.pop();
        while (!result.empty())
        {
            current->next = new ListNode(result.top());
            result.pop();
            current = current->next;
        }
        return root;
    }
};