class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> result;
        vector<int> current;
        int i, Size = nums.size();
        result.push_back(current);
        current.push_back(nums[0]);
        result.push_back(current);
        DFS(nums, Size, 1, current, result);
        for (i = 1; i < Size; ++i)
        {
            current[0] = nums[i];
            result.push_back(current);
            DFS(nums, Size, i + 1, current, result);
        }
        return result;
    }
    void DFS(vector<int>& nums, int Size, int currentIndex, vector<int> current, vector<vector<int>>& result)
    {
        int i;
        for (i = currentIndex; i < Size; ++i)
        {
            result.push_back(current);
            result[result.size() - 1].push_back(nums[i]);
            DFS(nums, Size, i + 1, result[result.size() - 1], result);
        }
    }
};